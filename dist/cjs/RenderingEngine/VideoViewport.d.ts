import { VideoViewport as VideoViewportEnum } from '../enums';
import { IVideoViewport, VideoViewportProperties, Point3, Point2, ICamera, VideoViewportInput } from '../types';
import Viewport from './Viewport';
declare class VideoViewport extends Viewport implements IVideoViewport {
    readonly uid: any;
    readonly renderingEngineId: string;
    readonly canvasContext: CanvasRenderingContext2D;
    private videoElement?;
    private videoWidth;
    private videoHeight;
    private loop;
    private mute;
    private isPlaying;
    private scrollSpeed;
    private fps;
    private videoCamera;
    constructor(props: VideoViewportInput);
    static get useCustomRenderingPipeline(): boolean;
    private addEventListeners;
    private removeEventListeners;
    private elementDisabledHandler;
    setVideoURL(videoURL: string): Promise<unknown>;
    togglePlayPause(): boolean;
    play(): void;
    pause(): Promise<void>;
    scroll(delta?: number): Promise<void>;
    start(): Promise<void>;
    end(): Promise<void>;
    setTime(timeInSeconds: number): Promise<void>;
    setFrame(frame: number): Promise<void>;
    setProperties(videoInterface: VideoViewportProperties): void;
    setPlaybackRate(rate?: number): void;
    setScrollSpeed(scrollSpeed?: number, unit?: VideoViewportEnum.SpeedUnit): void;
    getProperties: () => VideoViewportProperties;
    resetProperties(): void;
    getImageData(): any;
    setCamera(camera: ICamera): void;
    getCamera(): ICamera;
    resetCamera: () => boolean;
    getFrameOfReferenceUID: () => string;
    resize: () => void;
    canvasToWorld: (canvasPos: Point2) => Point3;
    worldToCanvas: (worldPos: Point3) => Point2;
    private refreshRenderValues;
    private getWorldToCanvasRatio;
    private getCanvasToWorldRatio;
    customRenderViewportToCanvas: () => void;
    private renderFrame;
    private renderWhilstPlaying;
}
export default VideoViewport;
